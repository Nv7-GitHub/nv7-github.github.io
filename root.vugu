<div>
  <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
      <a class="navbar-brand" href="/">
      <img src="/favicon/darkmode.svg" width="30" height="30" class="d-inline-block align-top" alt="logo">
        Nv7's Projects
      </a>

      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target=".navbar-collapse">
        <span class="navbar-toggler-icon"></span>
      </button>

      <nav class="collapse navbar-collapse" role="navigation">
        <ul class="navbar-nav ml-auto nav">
          <li class="nav-item">
            <a :class='"nav-link " + c.isOpen("")' @click='c.ChangePage("")'>Home</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="https://discord.com/oauth2/authorize?client_id=788185365533556736&scope=bot&permissions=8">Nv7 Bot</a>
          </li>
          <li :class='"dropdown nav-item " + c.isOpen("!")'>
            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
              Nv7's Projects
            </a>
            <div class="dropdown-menu" aria-labelledby="navbarDropdown">
              <a class="dropdown-item" @click='c.ChangePage("WordSearch")'>WordSearch</a>
              <a class="dropdown-item" @click='c.ChangePage("Hella")'>Hella</a>
              <a class="dropdown-item" @click='c.ChangePage("BestEver")'>BestEver</a>
              <a class="dropdown-item" @click='c.ChangePage("LetterBoxed")'>LetterBoxed</a>
              <a class="dropdown-item" @click='c.ChangePage("Notes")'>Notes</a>
              <a class="dropdown-item" @click='c.ChangePage("Wiki")'>Element Wiki</a>
              <a class="dropdown-item" @click='c.ChangePage("Tf")'>Thoughtfloat</a>
            </div>
          </li>
        </ul>
      </nav>
    </div>
  </nav>

  <div vg-if='c.Open == ""' class="container text-center mt-3">
    <h1>Nv7's Projects</h1>
    <p class="lead">Welcome to Nv7's Projects! This is where Nv7 keeps all of his fun or interesting programs! You can check them out by pressing the dropdown in the top!
    This page is being rendered via
    <a @click='event.PreventDefault();c.ShowWasm=!c.ShowWasm' href="https://webassembly.org/">WebAssembly</a>,
    and written in
    <a @click='event.PreventDefault();c.ShowGo=!c.ShowGo' href="https://golang.org/">Go</a>,
    using
    <a @click='event.PreventDefault();c.ShowVugu=!c.ShowVugu' href="https://vugu.org/">Vugu</a>.
    Thank you for checking out Nv7's Projects and be sure to check out some of the projects.</p>

    <div vg-if='c.ShowWasm' class="alert alert-primary" role="alert">
        <strong>WebAssembly</strong> (abbreviated Wasm) is a binary instruction format.
        It is designed as a portable target for compilation of high-level languages like Go/C/C++/Rust,
        enabling deployment on the web for client and server applications.
        <a target="_blank" href="https://webassembly.org/">Read more at webassembly.org &raquo;</a>
    </div>

    <div vg-if='c.ShowGo' class="alert alert-primary" role="alert">
        <strong>Go</strong> is an open source programming language that makes it easy to build simple, reliable, and efficient software.
        <a target="_blank" href="https://golang.org/">Read more at golang.org &raquo;</a>
    </div>

    <div vg-if='c.ShowVugu' class="alert alert-primary" role="alert">
        <strong>Vugu</strong> is a modern web UI library for Go+WebAssembly.
        It is written in pure Go, works well in most modern browsers and supports most features one would expect from
        a web framework.  It also makes a point of attempting to apply best practices
        from Go to web application UI development and prefers idiomatic solutions over
        techniques that follow patterns from JavaScript wherever possible.
        <a target="_blank" href="https://vugu.org/">Read more at vugu.org &raquo;</a>
    </div>
  </div>
  <main:WordSearch vg-if='c.Open == "WordSearch"'></main:WordSearch>
  <main:Hella vg-if='c.Open == "Hella"'></main:Hella>
  <main:BestEver vg-if='c.Open == "BestEver"'></main:BestEver>
  <main:LetterBoxed vg-if='c.Open == "LetterBoxed"'></main:LetterBoxed>
  <main:Notes vg-if='c.Open == "Notes"'></main:Notes>
  <main:Wiki vg-if='c.Open == "Wiki"'></main:Wiki>
  <main:Tf vg-if='c.Open == "Tf"'></main:Tf>
</div>

<script type="application/x-go">
import sjs "syscall/js"

var valid []string = []string{"WordSearch", "Hella", "BestEver", "LetterBoxed", "Notes", "Wiki", "Tf"}

type Root struct {
  Open string `vugu:"data"`
  ShowWasm bool `vugu:"data"`
  ShowGo bool   `vugu:"data"`
  ShowVugu bool `vugu:"data"`
}

func (c *Root) isOpen(component string) string {
  if component == "" && c.Open == "" {
    return "active"
  } else if component != "" && c.Open != ""  {
    return "active"
  }
  return ""
}

func (c *Root) Init(ctx vugu.InitCtx) {
  loc := js.Global().Get("window").Get("location").Get("href").String()
  loc = strings.Replace(loc, "#", "", -1)
  c.Open = ""
  if strings.Contains(loc, "?page=") {
    pageName := strings.Split(strings.Split(loc, "?page=")[1], "&")[0]
    for _, val := range valid {
      if strings.ToLower(pageName) == strings.ToLower(val) {
        c.Open = val
      }
    }
  }
}

func (c *Root) ChangePage(newPage string) {
  c.Open = newPage
  js.Global().Get("window").Get("history").Call("pushState", js.ValueOf(map[string]interface{}{}), js.ValueOf(""), js.ValueOf("?page=" + newPage))
  sjs.Global().Get("window").Set("onpopstate", sjs.FuncOf(func(this sjs.Value, args []sjs.Value) interface{} {
    c.Init(nil)
    return "";
  }))
}

</script>
